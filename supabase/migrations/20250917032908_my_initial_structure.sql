create type "public"."tenant_user_role" as enum ('admin', 'agent');

create type "public"."ticket_channel" as enum ('email', 'web_push', 'sms');

create type "public"."ticket_priority" as enum ('low', 'medium', 'high', 'urgent');

create type "public"."ticket_status" as enum ('open', 'in_progress', 'information_missing', 'canceled', 'done');

create table "public"."comments" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "comment_text" text not null,
    "author_lname" text not null,
    "is_internal" boolean not null default true,
    "ticket" bigint not null,
    "created_by" bigint not null,
    "tenant" text not null
);


create table "public"."sla_policies" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "is_default" boolean not null default false,
    "applies_to_priority" ticket_priority,
    "first_response_mins" integer not null,
    "resolve_mins" integer not null,
    "active_from" timestamp with time zone default now(),
    "active_to" timestamp with time zone not null,
    "tenant_id" text not null
);


create table "public"."tenant_permissions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_profile" bigint not null,
    "tenant" text not null,
    "user_role" tenant_user_role not null default 'agent'::tenant_user_role
);


alter table "public"."tenant_permissions" enable row level security;

create table "public"."tenants" (
    "id" text not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "domain" text not null,
    "logo" text,
    "website" text,
    "industry" text,
    "num_of_employees" bigint
);


alter table "public"."tenants" enable row level security;

create table "public"."tickets" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text not null,
    "status" ticket_status not null default 'open'::ticket_status,
    "priority" ticket_priority not null default 'medium'::ticket_priority,
    "category" text,
    "first_response_at" timestamp with time zone,
    "resolved_at" timestamp with time zone,
    "created_by" bigint not null,
    "assigned_to" bigint,
    "tenant" text not null,
    "sla_policy" bigint
);


create table "public"."user_profiles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "full_name" text,
    "supabase_user" uuid not null,
    "avatar" text,
    "bio" text,
    "socials" jsonb,
    "phone" text,
    "job_title" text,
    "is_online" boolean not null default true,
    "dob" date
);


alter table "public"."user_profiles" enable row level security;

CREATE UNIQUE INDEX comments_pkey ON public.comments USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.user_profiles USING btree (id);

CREATE UNIQUE INDEX profiles_supabase_user_key ON public.user_profiles USING btree (supabase_user);

CREATE UNIQUE INDEX sla_policies_pkey ON public.sla_policies USING btree (id);

CREATE UNIQUE INDEX tenant_permissions_pkey ON public.tenant_permissions USING btree (id);

CREATE UNIQUE INDEX tenants_domain_key ON public.tenants USING btree (domain);

CREATE UNIQUE INDEX tenants_pkey ON public.tenants USING btree (id);

CREATE UNIQUE INDEX tickets_pkey ON public.tickets USING btree (id);

alter table "public"."comments" add constraint "comments_pkey" PRIMARY KEY using index "comments_pkey";

alter table "public"."sla_policies" add constraint "sla_policies_pkey" PRIMARY KEY using index "sla_policies_pkey";

alter table "public"."tenant_permissions" add constraint "tenant_permissions_pkey" PRIMARY KEY using index "tenant_permissions_pkey";

alter table "public"."tenants" add constraint "tenants_pkey" PRIMARY KEY using index "tenants_pkey";

alter table "public"."tickets" add constraint "tickets_pkey" PRIMARY KEY using index "tickets_pkey";

alter table "public"."user_profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."comments" add constraint "comments_created_by_fkey" FOREIGN KEY (created_by) REFERENCES user_profiles(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_created_by_fkey";

alter table "public"."comments" add constraint "comments_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_tenant_fkey";

alter table "public"."comments" add constraint "comments_ticket_fkey" FOREIGN KEY (ticket) REFERENCES tickets(id) ON DELETE CASCADE not valid;

alter table "public"."comments" validate constraint "comments_ticket_fkey";

alter table "public"."sla_policies" add constraint "sla_policies_tenant_id_fkey" FOREIGN KEY (tenant_id) REFERENCES tenants(id) ON DELETE CASCADE not valid;

alter table "public"."sla_policies" validate constraint "sla_policies_tenant_id_fkey";

alter table "public"."tenant_permissions" add constraint "tenant_permissions_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tenant_permissions" validate constraint "tenant_permissions_tenant_fkey";

alter table "public"."tenant_permissions" add constraint "tenant_permissions_user_profile_fkey" FOREIGN KEY (user_profile) REFERENCES user_profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."tenant_permissions" validate constraint "tenant_permissions_user_profile_fkey";

alter table "public"."tenants" add constraint "tenants_domain_key" UNIQUE using index "tenants_domain_key";

alter table "public"."tickets" add constraint "tickets_assigned_to_fkey" FOREIGN KEY (assigned_to) REFERENCES user_profiles(id) ON DELETE CASCADE not valid;

alter table "public"."tickets" validate constraint "tickets_assigned_to_fkey";

alter table "public"."tickets" add constraint "tickets_created_by_fkey" FOREIGN KEY (created_by) REFERENCES user_profiles(id) ON DELETE CASCADE not valid;

alter table "public"."tickets" validate constraint "tickets_created_by_fkey";

alter table "public"."tickets" add constraint "tickets_sla_policy_fkey" FOREIGN KEY (sla_policy) REFERENCES sla_policies(id) ON DELETE CASCADE not valid;

alter table "public"."tickets" validate constraint "tickets_sla_policy_fkey";

alter table "public"."tickets" add constraint "tickets_tenant_fkey" FOREIGN KEY (tenant) REFERENCES tenants(id) ON DELETE CASCADE not valid;

alter table "public"."tickets" validate constraint "tickets_tenant_fkey";

alter table "public"."user_profiles" add constraint "profiles_supabase_user_fkey" FOREIGN KEY (supabase_user) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_profiles" validate constraint "profiles_supabase_user_fkey";

alter table "public"."user_profiles" add constraint "profiles_supabase_user_key" UNIQUE using index "profiles_supabase_user_key";

grant delete on table "public"."comments" to "anon";

grant insert on table "public"."comments" to "anon";

grant references on table "public"."comments" to "anon";

grant select on table "public"."comments" to "anon";

grant trigger on table "public"."comments" to "anon";

grant truncate on table "public"."comments" to "anon";

grant update on table "public"."comments" to "anon";

grant delete on table "public"."comments" to "authenticated";

grant insert on table "public"."comments" to "authenticated";

grant references on table "public"."comments" to "authenticated";

grant select on table "public"."comments" to "authenticated";

grant trigger on table "public"."comments" to "authenticated";

grant truncate on table "public"."comments" to "authenticated";

grant update on table "public"."comments" to "authenticated";

grant delete on table "public"."comments" to "service_role";

grant insert on table "public"."comments" to "service_role";

grant references on table "public"."comments" to "service_role";

grant select on table "public"."comments" to "service_role";

grant trigger on table "public"."comments" to "service_role";

grant truncate on table "public"."comments" to "service_role";

grant update on table "public"."comments" to "service_role";

grant delete on table "public"."sla_policies" to "anon";

grant insert on table "public"."sla_policies" to "anon";

grant references on table "public"."sla_policies" to "anon";

grant select on table "public"."sla_policies" to "anon";

grant trigger on table "public"."sla_policies" to "anon";

grant truncate on table "public"."sla_policies" to "anon";

grant update on table "public"."sla_policies" to "anon";

grant delete on table "public"."sla_policies" to "authenticated";

grant insert on table "public"."sla_policies" to "authenticated";

grant references on table "public"."sla_policies" to "authenticated";

grant select on table "public"."sla_policies" to "authenticated";

grant trigger on table "public"."sla_policies" to "authenticated";

grant truncate on table "public"."sla_policies" to "authenticated";

grant update on table "public"."sla_policies" to "authenticated";

grant delete on table "public"."sla_policies" to "service_role";

grant insert on table "public"."sla_policies" to "service_role";

grant references on table "public"."sla_policies" to "service_role";

grant select on table "public"."sla_policies" to "service_role";

grant trigger on table "public"."sla_policies" to "service_role";

grant truncate on table "public"."sla_policies" to "service_role";

grant update on table "public"."sla_policies" to "service_role";

grant delete on table "public"."tenant_permissions" to "anon";

grant insert on table "public"."tenant_permissions" to "anon";

grant references on table "public"."tenant_permissions" to "anon";

grant select on table "public"."tenant_permissions" to "anon";

grant trigger on table "public"."tenant_permissions" to "anon";

grant truncate on table "public"."tenant_permissions" to "anon";

grant update on table "public"."tenant_permissions" to "anon";

grant delete on table "public"."tenant_permissions" to "authenticated";

grant insert on table "public"."tenant_permissions" to "authenticated";

grant references on table "public"."tenant_permissions" to "authenticated";

grant select on table "public"."tenant_permissions" to "authenticated";

grant trigger on table "public"."tenant_permissions" to "authenticated";

grant truncate on table "public"."tenant_permissions" to "authenticated";

grant update on table "public"."tenant_permissions" to "authenticated";

grant delete on table "public"."tenant_permissions" to "service_role";

grant insert on table "public"."tenant_permissions" to "service_role";

grant references on table "public"."tenant_permissions" to "service_role";

grant select on table "public"."tenant_permissions" to "service_role";

grant trigger on table "public"."tenant_permissions" to "service_role";

grant truncate on table "public"."tenant_permissions" to "service_role";

grant update on table "public"."tenant_permissions" to "service_role";

grant delete on table "public"."tenants" to "anon";

grant insert on table "public"."tenants" to "anon";

grant references on table "public"."tenants" to "anon";

grant select on table "public"."tenants" to "anon";

grant trigger on table "public"."tenants" to "anon";

grant truncate on table "public"."tenants" to "anon";

grant update on table "public"."tenants" to "anon";

grant delete on table "public"."tenants" to "authenticated";

grant insert on table "public"."tenants" to "authenticated";

grant references on table "public"."tenants" to "authenticated";

grant select on table "public"."tenants" to "authenticated";

grant trigger on table "public"."tenants" to "authenticated";

grant truncate on table "public"."tenants" to "authenticated";

grant update on table "public"."tenants" to "authenticated";

grant delete on table "public"."tenants" to "service_role";

grant insert on table "public"."tenants" to "service_role";

grant references on table "public"."tenants" to "service_role";

grant select on table "public"."tenants" to "service_role";

grant trigger on table "public"."tenants" to "service_role";

grant truncate on table "public"."tenants" to "service_role";

grant update on table "public"."tenants" to "service_role";

grant delete on table "public"."tickets" to "anon";

grant insert on table "public"."tickets" to "anon";

grant references on table "public"."tickets" to "anon";

grant select on table "public"."tickets" to "anon";

grant trigger on table "public"."tickets" to "anon";

grant truncate on table "public"."tickets" to "anon";

grant update on table "public"."tickets" to "anon";

grant delete on table "public"."tickets" to "authenticated";

grant insert on table "public"."tickets" to "authenticated";

grant references on table "public"."tickets" to "authenticated";

grant select on table "public"."tickets" to "authenticated";

grant trigger on table "public"."tickets" to "authenticated";

grant truncate on table "public"."tickets" to "authenticated";

grant update on table "public"."tickets" to "authenticated";

grant delete on table "public"."tickets" to "service_role";

grant insert on table "public"."tickets" to "service_role";

grant references on table "public"."tickets" to "service_role";

grant select on table "public"."tickets" to "service_role";

grant trigger on table "public"."tickets" to "service_role";

grant truncate on table "public"."tickets" to "service_role";

grant update on table "public"."tickets" to "service_role";

grant delete on table "public"."user_profiles" to "anon";

grant insert on table "public"."user_profiles" to "anon";

grant references on table "public"."user_profiles" to "anon";

grant select on table "public"."user_profiles" to "anon";

grant trigger on table "public"."user_profiles" to "anon";

grant truncate on table "public"."user_profiles" to "anon";

grant update on table "public"."user_profiles" to "anon";

grant delete on table "public"."user_profiles" to "authenticated";

grant insert on table "public"."user_profiles" to "authenticated";

grant references on table "public"."user_profiles" to "authenticated";

grant select on table "public"."user_profiles" to "authenticated";

grant trigger on table "public"."user_profiles" to "authenticated";

grant truncate on table "public"."user_profiles" to "authenticated";

grant update on table "public"."user_profiles" to "authenticated";

grant delete on table "public"."user_profiles" to "service_role";

grant insert on table "public"."user_profiles" to "service_role";

grant references on table "public"."user_profiles" to "service_role";

grant select on table "public"."user_profiles" to "service_role";

grant trigger on table "public"."user_profiles" to "service_role";

grant truncate on table "public"."user_profiles" to "service_role";

grant update on table "public"."user_profiles" to "service_role";

create policy "allow reading own permission"
on "public"."tenant_permissions"
as permissive
for select
to authenticated
using ((EXISTS ( SELECT
   FROM user_profiles up
  WHERE ((up.id = tenant_permissions.user_profile) AND (up.supabase_user = auth.uid())))));


create policy "users can query tenant if has permission"
on "public"."tenants"
as permissive
for select
to authenticated
using (COALESCE((((auth.jwt() -> 'app_metadata'::text) -> 'tenants'::text) ? id), false));


create policy "access own user data"
on "public"."user_profiles"
as permissive
for select
to authenticated
using ((supabase_user = auth.uid()));



